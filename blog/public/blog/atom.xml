<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[jwinter.org]]></title>
  <link href="http://jwinter.org/blog/atom.xml" rel="self"/>
  <link href="http://jwinter.org/blog/"/>
  <updated>2013-03-02T09:40:43-05:00</updated>
  <id>http://jwinter.org/blog/</id>
  <author>
    <name><![CDATA[Joe W.]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Advice for Personal Projects]]></title>
    <link href="http://jwinter.org/blog/blog/2013/01/18/advice-for-personal-projects/"/>
    <updated>2013-01-18T00:00:00-05:00</updated>
    <id>http://jwinter.org/blog/blog/2013/01/18/advice-for-personal-projects</id>
    <content type="html"><![CDATA[<p><a href="http://movieos.org/blog/2013/rules-for-personal-projects/">http://movieos.org/blog/2013/rules-for-personal-projects/</a></p><p>This makes a lot of sense, I&#8217;m often lost when I try to go back to a personal project that I&#8217;ve left off for a few weeks. Something like a &#8220;run&#8221; bash script that just did &#8220;rails s &amp;&amp; open &#8216;http://localhost:3000/last_thing_i_worked_on&#8217;&#8221; would be good to get started again quickly. And taking the time to deploy the little Clojure projects I&#8217;ve done to heroku would be worthwhile.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Stubbing HTTP APIs with VCR]]></title>
    <link href="http://jwinter.org/blog/blog/2012/10/16/stubbing-http-apis-with-vcr/"/>
    <updated>2012-10-16T00:00:00-04:00</updated>
    <id>http://jwinter.org/blog/blog/2012/10/16/stubbing-http-apis-with-vcr</id>
    <content type="html"><![CDATA[]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting up a new MacBook Pro for Ruby / RoR development]]></title>
    <link href="http://jwinter.org/blog/blog/2012/05/27/setting-up-a-new-macbook-pro-for-ruby-ror-dev/"/>
    <updated>2012-05-27T00:00:00-04:00</updated>
    <id>http://jwinter.org/blog/blog/2012/05/27/setting-up-a-new-macbook-pro-for-ruby-ror-dev</id>
    <content type="html"><![CDATA[<p>Install Xcode _or_ just the Xcode command line utitilies (I installed all of Xcode)</p><p>&nbsp;</p><p>Pivotal Labs: soloist gem, pivotal_workstation</p><p>errored out on SizeUp</p><p>errored out on MacVim</p><p>errored out on gem_no_ri_no_rdoc</p><p>&nbsp;</p><p>Mouse Locator defaults to on and captures Ctrl-space. If you&#8217;re an emacs user, you&#8217;ll know why this is a problem.</p><p>&nbsp;</p><p>Installing ruby-1.8.7 `env CC=/usr/bin/gcc rvm install ruby-1.8.7`</p><p>&nbsp;</p><p>Things I installed manually, but would like to automate:</p><p>iTerm2 preference for swapping Cmd and Option AND making &#8220;Option&#8221; send Esc-+ (meta)</p><p>emacs 24 - look at the emacs24 recipe</p><p>Installed emacs from emacs 24 dmg</p><p>oh-my-zsh</p><p>&nbsp;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Yehuda Katz at Philly ETE - Rails 3.1 Engines]]></title>
    <link href="http://jwinter.org/blog/blog/2011/04/28/philadelphia-emerging-technology-for-the-ente/"/>
    <updated>2011-04-28T00:00:00-04:00</updated>
    <id>http://jwinter.org/blog/blog/2011/04/28/philadelphia-emerging-technology-for-the-ente</id>
    <content type="html"><![CDATA[<p><span style="font-size: medium;">Rails 3.1 Engines</span></p><p>Using an engine in Rails 3.0.x is functionally the same as copying the engine code directly into your app. There&#8217;s one giant global namespace for routing and helpers. This leads to ugly name mangling (devise_engine_login_helper) and routing collistions (match &#8220;login&#8221;).&nbsp;</p><div><span style="font-size: medium;">Detour into Rack</span></div><p /><div>Rack apps take a request hash (env) and return a response of [status_code, headers, response_body].</div><p /><div>Rails 3 router is Rack middleware, Rack apps</div><p /><div>Each middleware piece considers the thing above it &#8220;the server&#8221;, the thing below it as &#8220;the app&#8221;</div><p>Rails router can route to any rack app, seamlessly route to&nbsp;</p><p>&nbsp;</p><div>* Router chooses which Rack endpoint to send each request to</div><div>** match &#8220;/posts/*path&#8221; =&gt; SinatraApp || match &#8220;/users&#8221; =&gt; &#8220;posts#index&#8221; (translates to the controller action)</div><p /><p>&nbsp;</p><p>Some stuff that I probably should have known, but didn&#8217;t</p><p>Rails 3 router just points to Rack endpoints</p><p>Translates &#8220;posts#index&#8221; to PostsController.action(:index)</p><p>PostsController.action(:index) returns a Rack app</p><p>&nbsp;</p><p><span style="font-size: medium;">Mountable Engines in Rails 3.1 (currently in Rails edge)</span></p><p>Piotr Sarnacki developed engines for 3.1 for GSOC. His blog has a bunch of posts about Rails engines,&nbsp;<a href="http://piotrsarnacki.com/2010/12/21/mountable-apps-tutorial/  ">building an engine</a>, new&nbsp;<a href="http://piotrsarnacki.com/2010/09/14/mountable-engines/">features of engines</a>, and some of the&nbsp;<a href="http://piotrsarnacki.com/2010/09/06/rsoc-status-namespacing-engines/">reasoning behind the engines changes</a>.</p><p /><p /><div><div>** API called mount ! - mount SinatraApp =&gt; &#8220;/posts&#8221;</div><div>** This has all worked since Rails 3</div><div>** Rails 3.1&nbsp;</div><div>*** Use mount</div><div>*** Engines are now Rack apps</div><div>** General rule - mount Rack app under a specific url</div><div>** Helpers!</div><div>*** helper: devise.login_path</div><div>*** helper :all</div><div>*** only include helpers in the current namespace</div><div>** Register a namespace for the namespace for the App</div><div>*** register Blog, then Blog::helpers belong to the Blog app (?)</div><div>** Migrations</div><div>*** rake railties:copy_migrations</div><div>**** Copied over to record history</div><div>**** Timestamps are updated to reflect what happened</div><div>*** migrations are a history of applied changes</div><div>** Assets</div><div>*** served through Rails server</div><div>*** Should be easy to get working without configuration</div><div>*** Works</div><div>** Rails 3.1 Sprockets</div><div>*** Compilation pipeline</div><div>*** Top level concern - template handling,&nbsp;</div><div>*** amping up cache_javascript :all</div><div>*** could be a whole new talk</div><div>** Engines can have assets</div><div>** SCSS and CoffeeScript</div><div>*** SCSS - opt-in when you want to, avoid CSS3 vendor hacks</div><div>*** CoffeeScript application.js.coffee</div><div>*** //= require(&#8216;something&#8217;)</div><div>**** That&#8217;s a sprockets directive, see sprockets site</div><div>*** CoffeeScript - point to something cool that exists</div><div>** //= require(&#8220;rails_admin/login&#8221;);</div><div>*** SCSS can @import Engine Files</div><div>@import &#8220;rails_admin/mixins.scss&#8221;;</div><div>** rails plugin new blog &#8211;mountable &lt;=== build an engine</div><div>#+BEGIN_SRC ruby</div><div>module Blog</div><div>class Engine &lt; Rails::Engine</div><div>isolate_namespace Blog # where to look for helpers</div><div>end</div><div>end</div><div>#+END_SRC</div><div>** rails g scaffold post title:string&nbsp;</div><div>*** will detect that you&#8217;re in an engine that&#8217;s inside a namespace</div><div>*** Do all the scaffoldy stuff inside of a namespace Blog::Post</div><div>** rails server #works inside of an engine</div><div>*** Runs against dummy application that has loaded the engine inside of it</div><div>** piotrsarnacki.com ALL THE DETAILS !!!</div><div>*** What should params look like (they look the same)</div><div>** Questions</div><div>*** Multiple db connection not supported by Engines</div><div>*** Take a look at Octopus (db sharding)</div><div>**** Look at adding Engine support (use this db for this namespace)</div><div>** Assets - what&#8217;s the heroku problem? Look up the heroku problem</div><div>*** rake deploy (does that exist?)</div><div>** Devise will define the API &#8211; Devise for authentication</div></div><p /><p>&nbsp;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA["Polyfills" for backwards compatibility]]></title>
    <link href="http://jwinter.org/blog/blog/2010/10/12/polyfills-for-backwards-compatibility/"/>
    <updated>2010-10-12T00:00:00-04:00</updated>
    <id>http://jwinter.org/blog/blog/2010/10/12/polyfills-for-backwards-compatibility</id>
    <content type="html"><![CDATA[<p>Modernizr has an awesome <a href="http://github.com/Modernizr/Modernizr/wiki/HTML5-Cross-browser-Polyfills">list of HTML 5 &#8220;Polyfills&#8221;</a> (fallbacks to provide new features in older browsers with the same new API):</p><p>&nbsp;</p><p>&nbsp;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using RVM in production with Passenger]]></title>
    <link href="http://jwinter.org/blog/blog/2010/09/24/using-rvm-in-production-with-passenger/"/>
    <updated>2010-09-24T00:00:00-04:00</updated>
    <id>http://jwinter.org/blog/blog/2010/09/24/using-rvm-in-production-with-passenger</id>
    <content type="html"><![CDATA[<p><span style="font-family: arial, sans-serif;"><div class="kl" style="margin-bottom: 0.2em; text-align: left;">you need to generate a special passenger_ruby for passenger to run</div><div class="kl" style="margin-bottom: 0.2em; text-align: left;">and rvm-install-system-wide is just a bitly link to a git commit right now</div><div class="kl" style="margin-bottom: 0.2em; text-align: left;">oh and &#8220;rvm notes&#8221; will tell you what dependencies you&#8217;re missing after you install rvm, but before you install any rubies</div></span></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[EventMachine timers]]></title>
    <link href="http://jwinter.org/blog/blog/2010/09/24/eventmachine-timers/"/>
    <updated>2010-09-24T00:00:00-04:00</updated>
    <id>http://jwinter.org/blog/blog/2010/09/24/eventmachine-timers</id>
    <content type="html"><![CDATA[<p>There is a limit on the number of running eventmachine timers you can use at one time. &nbsp;And cancelling a timer does *not* free up one of those slots for running timers, you must wait until the time when the timer would actually fire to free up a slot. The default on most systems is 1000 timers. set_max_timers(count) allows you to increase it.</p><p>This doesn&#8217;t apply to the pure Ruby eventmachine, it has no max_timer limit.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Autotest in Rails]]></title>
    <link href="http://jwinter.org/blog/blog/2010/07/21/autotest-in-rails/"/>
    <updated>2010-07-21T00:00:00-04:00</updated>
    <id>http://jwinter.org/blog/blog/2010/07/21/autotest-in-rails</id>
    <content type="html"><![CDATA[<p>Autotest runs all of your test whenever you save a change to a file.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Emacs, ansi-term, and screen]]></title>
    <link href="http://jwinter.org/blog/blog/2010/05/23/emacs-ansi-term-and-screen/"/>
    <updated>2010-05-23T00:00:00-04:00</updated>
    <id>http://jwinter.org/blog/blog/2010/05/23/emacs-ansi-term-and-screen</id>
    <content type="html"><![CDATA[<p>C-c C-j turns your ansi-term buffer into a normal emacs buffer where you can copy/paste. C-c C-k switches it back.</p><p>So, for example, if you want to paste text into your ansi-term session, you&#8217;d copy that text from your emacs buffer, switch to your ansi-term buffer, hit C-c C-j, then M-y, then C-c C-k.</p><p>If you use emacs and you&#8217;re not using ansi-term and screen, you should give it a shot.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[James Brown Loves You]]></title>
    <link href="http://jwinter.org/blog/blog/2009/12/24/james-brown-loves-you/"/>
    <updated>2009-12-24T00:00:00-05:00</updated>
    <id>http://jwinter.org/blog/blog/2009/12/24/james-brown-loves-you</id>
    <content type="html"><![CDATA[<p><span style="font-size: 10px;"><object height="344" width="425"><param name="movie" value="http://www.youtube.com/v/WcQJj7d18eA&hl=en_US&fs=1&rel=0" /></param><param name="allowFullScreen" value="true" /></param><param name="allowscriptaccess" value="always" /></param><embed allowfullscreen="true" src="http://www.youtube.com/v/WcQJj7d18eA&hl=en_US&fs=1&rel=0" allowscriptaccess="always" type="application/x-shockwave-flash" height="344" width="425"></embed></object></span></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Dough Was for Me!]]></title>
    <link href="http://jwinter.org/blog/blog/2009/12/20/the-dough-was-for-me/"/>
    <updated>2009-12-20T00:00:00-05:00</updated>
    <id>http://jwinter.org/blog/blog/2009/12/20/the-dough-was-for-me</id>
    <content type="html"><![CDATA[<p><span style="font-size: 10px;"><object height="303" width="500"><param name="movie" value="http://www.youtube.com/v/F_J4SBUwe5U&hl=en_US&fs=1&rel=0" /></param><param name="allowFullScreen" value="true" /></param><param name="allowscriptaccess" value="always" /></param><embed allowfullscreen="true" src="http://www.youtube.com/v/F_J4SBUwe5U&hl=en_US&fs=1&rel=0" allowscriptaccess="always" type="application/x-shockwave-flash" height="303" width="500"></embed></object></span></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[I Miss anywhere.fm]]></title>
    <link href="http://jwinter.org/blog/blog/2009/12/18/i-miss-anywherefm/"/>
    <updated>2009-12-18T00:00:00-05:00</updated>
    <id>http://jwinter.org/blog/blog/2009/12/18/i-miss-anywherefm</id>
    <content type="html"><![CDATA[<p>anywhere.fm was my favorite web application.&nbsp; If you weren&#8217;t lucky enough to use it while it was around, it was like a Web-based iTunes.&nbsp; You could upload all of your music to it and then play it from anywhere you had an internet connection and a Flash player.&nbsp;</p><p>The UI bore a strong resemblance to iTunes, but its best UI feature was that everything was fast.&nbsp; Searching for a song in your collection was fast, switching to a new playlist was fast, creating a new playlist was fast.&nbsp; There are very few (maybe GMail?) Web apps where I could do what I wanted to as quickly.</p><p>Their import process had two features that I haven&#8217;t seen anywhere else: a) a convenient desktop app to upload your music in the background and b) the ability to upload <strong>all</strong> of your music.&nbsp; The OS X native app to upload your music worked perfectly for me.&nbsp; It took a few days to get it all, but eventually I had several thousand songs uploaded to anywhere.fm.&nbsp;</p><p>I want to emphasize how happy it made me to have all of my music anywhere I was in front of a computer.</p><p>The anywhere story had a happy ending for the founders, but a sad one for their users.&nbsp; They were bought by imeem, which had an abysmal, sluggish interface and never migrated all of my music.&nbsp; Imeem was then acquired my MySpace Music which claims to have plans to migrate the music from Imeem.&nbsp; But there&#8217;s no chance MySpace will produce anything like anywhere.</p><p>I&#8217;m interested to see what the anywhere founders will build next, but they and YCombinator, the incubator that helped them get started, have lost a bit of my trust.&nbsp; I appreciate their hard work in building anywhere.&nbsp; But I&#8217;d like them to understand what it felt like when anywhere was taken away.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Odds Against Christmas Being Christmas Are Approximately 365 to 1.]]></title>
    <link href="http://jwinter.org/blog/blog/2009/12/12/the-odds-against-christmas-being-christmas-ar/"/>
    <updated>2009-12-12T00:00:00-05:00</updated>
    <id>http://jwinter.org/blog/blog/2009/12/12/the-odds-against-christmas-being-christmas-ar</id>
    <content type="html"><![CDATA[<p><span style="font-size: 10px;"><object height="344" width="425"><param name="movie" value="http://www.youtube.com/v/IvfunCK3S_o&hl=en_US&fs=1&rel=0" /></param><param name="allowFullScreen" value="true" /></param><param name="allowscriptaccess" value="always" /></param><embed allowfullscreen="true" src="http://www.youtube.com/v/IvfunCK3S_o&hl=en_US&fs=1&rel=0" allowscriptaccess="always" type="application/x-shockwave-flash" height="344" width="425"></embed></object></span></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JOGL and Clojure]]></title>
    <link href="http://jwinter.org/blog/blog/2009/04/21/jogl-and-clojure/"/>
    <updated>2009-04-21T00:00:00-04:00</updated>
    <id>http://jwinter.org/blog/blog/2009/04/21/jogl-and-clojure</id>
    <content type="html"><![CDATA[<p>JOGL is an OpenGL implementation in Java. Clojure is a Lisp that runs <br />on the JVM. <br />&nbsp;<br />Install JOGL <br />&nbsp;<br />Install Clojure <br />&nbsp;<br />Shortest code to draw a triangle on the screen. Use this to test that <br />everything was installed correctly. <br />&nbsp;<br /><code>(ns bb <br />&nbsp;(:import (java.awt Frame BorderLayout) <br />&nbsp;     (javax.swing JFrame) <br />&nbsp;     (java.awt.event WindowAdapter WindowEvent) <br />&nbsp;     (javax.media.opengl GL GLAutoDrawable GLDrawableFactory <br />&nbsp;               GLCanvas GLEventListener GLCapabilities) <br />&nbsp;     (com.sun.opengl.util Animator) <br />)) <br />&nbsp;;;Add a .dispose to this frame's windowClosing event <br />(defn window-closer [frame] <br />&nbsp;(proxy [WindowAdapter] [] <br />&nbsp; (windowClosing [event] <br />&nbsp;         (.start (new Thread <br />&nbsp;               (fn [] <br />&nbsp;                (.dispose frame))))))) <br />&nbsp;(defn gl-listener [] <br />&nbsp;(proxy [GLEventListener] [] <br />&nbsp; (init [drawable] <br />&nbsp;    (doto (.getGL drawable) <br />&nbsp;     (.glClearColor 0.0 0.0 0.0 1.0) <br />&nbsp;     (.glColor3f 0.0 0.0 0.0) <br />&nbsp;    )) <br />&nbsp; (display [drawable] <br />&nbsp;    (doto (.getGL drawable) <br />&nbsp;     (.glClear GL/GL_COLOR_BUFFER_BIT) <br />&nbsp;     (.glColor3f 1, 0, 0) <br />&nbsp;     (.glRecti 0 0 1 1) <br />&nbsp;     (.glColor3f 0.0 0.0 0.0) <br />&nbsp;     (.glMatrixMode GL/GL_MODELVIEW) <br />&nbsp;     (.glLoadIdentity) <br />&nbsp;     )) <br />&nbsp; (displayChanged [drawable mode device]) <br />&nbsp; (reshape [drawable x y w h]) <br />&nbsp; )) <br />&nbsp;;; Draw the scene <br />(defn main [] <br />&nbsp;(let [frame (new Frame "Hey dere Joe") <br />&nbsp;   gl-canvas (new GLCanvas) <br />&nbsp;   ] <br />&nbsp; (.addGLEventListener gl-canvas (gl-listener)) <br />&nbsp; (.setSize frame 600 600) <br />&nbsp; (.add frame gl-canvas) <br />&nbsp; (.setVisible frame true) <br />&nbsp; (.addWindowListener frame (window-closer frame))))</code></p>
]]></content>
  </entry>
  
</feed>
